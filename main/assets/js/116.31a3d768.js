(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{626:function(e,t,s){"use strict";s.r(t);var n=s(1),o=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"adr-059-test-scopes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#adr-059-test-scopes"}},[e._v("#")]),e._v(" ADR 059: Test Scopes")]),e._v(" "),s("h2",{attrs:{id:"changelog"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#changelog"}},[e._v("#")]),e._v(" Changelog")]),e._v(" "),s("ul",[s("li",[e._v("2022-08-02: Initial Draft")])]),e._v(" "),s("h2",{attrs:{id:"status"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#status"}},[e._v("#")]),e._v(" Status")]),e._v(" "),s("p",[e._v("PROPOSED Partially Implemented")]),e._v(" "),s("h2",{attrs:{id:"abstract"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),s("p",[e._v("Recent work in the SDK aimed at breaking apart the monolithic root go module has highlighted\nshortcomings and inconsistencies in our testing paradigm.  This ADR clarifies a common\nlanguage for talking about test scopes and proposes an ideal state of tests at each scope.")]),e._v(" "),s("h2",{attrs:{id:"context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[e._v("#")]),e._v(" Context")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-053-go-module-refactoring.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("ADR-053: Go Module Refactoring"),s("OutboundLink")],1),e._v(" expresses our desire for an SDK composed of many\nindependently versioned Go modules, and "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-057-app-wiring-1.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("ADR-057: App Wiring Part I"),s("OutboundLink")],1),e._v(" offers a methodology\nfor breaking apart inter-module dependencies through the use of dependency injection.  As\ndescribed in "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/issues/11899",target:"_blank",rel:"noopener noreferrer"}},[e._v("EPIC: Separate all SDK modules into standalone go modules"),s("OutboundLink")],1),e._v(", module\ndependencies are particularly complected in the test phase, where simapp is used as\nthe key test fixture in setting up and running tests.  It is clear that the successful\ncompletion of Phases 3 and 4 in that EPIC require the resolution of this dependency problem.")]),e._v(" "),s("p",[e._v("In "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/issues/12398",target:"_blank",rel:"noopener noreferrer"}},[e._v("EPIC: Unit Testing of Modules via Mocks"),s("OutboundLink")],1),e._v(" it was thought this Gordian knot could be\nunwound by mocking all dependencies in the test phase for each module, but seeing how these\nrefactors were complete rewrites of test suites discussions began around the fate of the\nexisting integration tests.  One perspective is that they ought to be thrown out, another is\nthat integration tests have some utility of their own and a place in the SDK's testing story.")]),e._v(" "),s("p",[e._v("Another point of confusion has been the current state of CLI test suites, "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/0f7e56c6f9102cda0ca9aba5b6f091dbca976b5a/x/auth/client/testutil/suite.go#L44-L49",target:"_blank",rel:"noopener noreferrer"}},[e._v("x/auth"),s("OutboundLink")],1),e._v(" for\nexample.  In code these are called integration tests, but in reality function as end to end\ntests by starting up a tendermint node and full application.  "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/issues/12696",target:"_blank",rel:"noopener noreferrer"}},[e._v("EPIC: Rewrite and simplify\nCLI tests"),s("OutboundLink")],1),e._v(" identifies the ideal state of CLI tests using mocks, but does not address the\nplace end to end tests may have in the SDK.")]),e._v(" "),s("p",[e._v("From here we identify three scopes of testing, "),s("strong",[e._v("unit")]),e._v(", "),s("strong",[e._v("integration")]),e._v(", "),s("strong",[e._v("e2e")]),e._v(" (end to\nend), seek to define the boundaries of each, their shortcomings (real and imposed), and their\nideal state in the SDK.")]),e._v(" "),s("h3",{attrs:{id:"unit-tests"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unit-tests"}},[e._v("#")]),e._v(" Unit tests")]),e._v(" "),s("p",[e._v("Unit tests exercise the code contained in a single module (e.g. "),s("code",[e._v("/x/bank")]),e._v(") or package\n(e.g. "),s("code",[e._v("/client")]),e._v(") in isolation from the rest of the code base.  Within this we identify two\nlevels of unit tests, "),s("em",[e._v("illustrative")]),e._v(" and "),s("em",[e._v("journey")]),e._v(".  The definitions below lean heavily on\n"),s("a",{attrs:{href:"https://leanpub.com/bddbooks-formulation",target:"_blank",rel:"noopener noreferrer"}},[e._v("The BDD Books - Formulation"),s("OutboundLink")],1),e._v(" section 1.3.")]),e._v(" "),s("p",[s("em",[e._v("Illustrative")]),e._v(" tests exercise an atomic part of a module in isolation - in this case we\nmight do fixture setup/mocking of other parts of the module.")]),e._v(" "),s("p",[e._v("Tests which exercise a whole module's function with dependencies mocked, are "),s("em",[e._v("journeys")]),e._v(".\nThese are almost like integration tests in that they exercise many things together but still\nuse mocks.")]),e._v(" "),s("p",[e._v("Example 1 journey vs illustrative tests - "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/main/depinject/features/bindings.feature",target:"_blank",rel:"noopener noreferrer"}},[e._v("depinject's BDD style tests"),s("OutboundLink")],1),e._v(", show how we can\nrapidly build up many illustrative cases demonstrating behavioral rules without "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/main/depinject/binding_test.go",target:"_blank",rel:"noopener noreferrer"}},[e._v("very much\ncode"),s("OutboundLink")],1),e._v(" while maintaining high level readability.")]),e._v(" "),s("p",[e._v("Example 2 "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/main/depinject/provider_desc_test.go",target:"_blank",rel:"noopener noreferrer"}},[e._v("depinject table driven tests"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("Example 3 "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/2bec9d2021918650d3938c3ab242f84289daef80/x/bank/keeper/keeper_test.go#L94-L105",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bank keeper tests"),s("OutboundLink")],1),e._v(" - A mock implementation of "),s("code",[e._v("AccountKeeper")]),e._v(" is\nsupplied to the keeper constructor.")]),e._v(" "),s("h4",{attrs:{id:"limitations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#limitations"}},[e._v("#")]),e._v(" Limitations")]),e._v(" "),s("p",[e._v("Certain modules are tightly coupled beyond the test phase.  A recent dependency report for\n"),s("code",[e._v("bank -> auth")]),e._v(" found 274 total usages of "),s("code",[e._v("auth")]),e._v(" in "),s("code",[e._v("bank")]),e._v(", 50 of which are in\nproduction code and 224 in test.  This tight coupling may suggest that either the modules\nshould be merged, or refactoring is required to abstract references to the core types tying\nthe modules together.  It could also indicate that these modules should be tested together\nin integration tests beyond mocked unit tests.")]),e._v(" "),s("p",[e._v("In some cases setting up a test case for a module with many mocked dependencies can be quite\ncumbersome and the resulting test may only show that the mocking framework works as expected\nrather than working as a functional test of interdependent module behavior.")]),e._v(" "),s("h3",{attrs:{id:"integration-tests"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#integration-tests"}},[e._v("#")]),e._v(" Integration tests")]),e._v(" "),s("p",[e._v("Integration tests define and exercise relationships between an arbitrary number of modules\nand/or application subsystems.")]),e._v(" "),s("p",[e._v("Wiring for integration tests is provided by "),s("code",[e._v("depinject")]),e._v(" and some "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/2bec9d2021918650d3938c3ab242f84289daef80/testutil/sims/app_helpers.go#L95",target:"_blank",rel:"noopener noreferrer"}},[e._v("helper code"),s("OutboundLink")],1),e._v(" starts up\na running application.  A section of the running application may then be tested.  Certain\ninputs during different phases of the application life cycle are expected to produce\ninvariant outputs without too much concern for component internals.  This type of black box\ntesting has a larger scope than unit testing.")]),e._v(" "),s("p",[e._v("Example 1 "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/2bec9d2021918650d3938c3ab242f84289daef80/client/grpc_query_test.go#L111-L129",target:"_blank",rel:"noopener noreferrer"}},[e._v("client/grpc_query_test/TestGRPCQuery"),s("OutboundLink")],1),e._v(" - This test is misplaced in "),s("code",[e._v("/client")]),e._v(",\nbut tests the life cycle of (at least) "),s("code",[e._v("runtime")]),e._v(" and "),s("code",[e._v("bank")]),e._v(" as they progress through\nstartup, genesis and query time.  It also exercises the fitness of the client and query\nserver without putting bytes on the wire through the use of "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/2bec9d2021918650d3938c3ab242f84289daef80/baseapp/grpcrouter_helpers.go#L31",target:"_blank",rel:"noopener noreferrer"}},[e._v("QueryServiceTestHelper"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("p",[e._v("Example 2 "),s("code",[e._v("x/evidence")]),e._v(" Keeper integration tests - Starts up an application composed of "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/2bec9d2021918650d3938c3ab242f84289daef80/x/evidence/testutil/app.yaml#L1",target:"_blank",rel:"noopener noreferrer"}},[e._v("8\nmodules"),s("OutboundLink")],1),e._v(" with "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/2bec9d2021918650d3938c3ab242f84289daef80/x/evidence/keeper/keeper_test.go#L101-L106",target:"_blank",rel:"noopener noreferrer"}},[e._v("5 keepers"),s("OutboundLink")],1),e._v(" used in the integration test suite.  One test in the suite\nexercises "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/2bec9d2021918650d3938c3ab242f84289daef80/x/evidence/keeper/infraction_test.go#L42",target:"_blank",rel:"noopener noreferrer"}},[e._v("HandleEquivocationEvidence"),s("OutboundLink")],1),e._v(" which contains many interactions with the staking\nkeeper.")]),e._v(" "),s("p",[e._v("Example 3 - Integration suite app configurations may also be specified via golang (not\nYAML as above) "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/main/x/nft/testutil/app_config.go",target:"_blank",rel:"noopener noreferrer"}},[e._v("statically"),s("OutboundLink")],1),e._v(" or "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/8c23f6f957d1c0bedd314806d1ac65bea59b084c/tests/integration/bank/keeper/keeper_test.go#L129-L134",target:"_blank",rel:"noopener noreferrer"}},[e._v("dynamically"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("h4",{attrs:{id:"limitations-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#limitations-2"}},[e._v("#")]),e._v(" Limitations")]),e._v(" "),s("p",[e._v("Setting up a particular input state may be more challenging since the application is\nstarting from a zero state.  Some of this may be addressed by good test fixture\nabstractions with testing of their own.  Tests may also be more brittle, and larger\nrefactors could impact application initialization in unexpected ways with harder to\nunderstand errors.  This could also be seen as a benefit, and indeed the SDK's current\nintegration tests were helpful in tracking down logic errors during earlier stages\nof app-wiring refactors.")]),e._v(" "),s("h3",{attrs:{id:"simulations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#simulations"}},[e._v("#")]),e._v(" Simulations")]),e._v(" "),s("p",[e._v("Simulations (also called generative testing) are a special case of integration tests where\ndeterministically random module operations are executed against a running simapp, building\nblocks on the chain until a specified height is reached.  No "),s("em",[e._v("specific")]),e._v(" assertions are\nmade for the state transitions resulting from module operations but any error will halt and\nfail the simulation.  Since "),s("code",[e._v("crisis")]),e._v(" is included in simapp and the simulation runs\nEndBlockers at the end of each block any module invariant violations will also fail\nthe simulation.")]),e._v(" "),s("p",[e._v("Modules must implement "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/2bec9d2021918650d3938c3ab242f84289daef80/types/module/simulation.go#L31",target:"_blank",rel:"noopener noreferrer"}},[e._v("AppModuleSimulation.WeightedOperations"),s("OutboundLink")],1),e._v(" to define their\nsimulation operations.  Note that not all modules implement this which may indicate a\ngap in current simulation test coverage.")]),e._v(" "),s("p",[e._v("Modules not returning simulation operations:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("auth")])]),e._v(" "),s("li",[s("code",[e._v("capability")])]),e._v(" "),s("li",[s("code",[e._v("evidence")])]),e._v(" "),s("li",[s("code",[e._v("mint")])]),e._v(" "),s("li",[s("code",[e._v("params")])])]),e._v(" "),s("p",[e._v("A separate binary, "),s("a",{attrs:{href:"https://github.com/cosmos/tools/tree/master/cmd/runsim",target:"_blank",rel:"noopener noreferrer"}},[e._v("runsim"),s("OutboundLink")],1),e._v(", is responsible for kicking off some of these tests and\nmanaging their life cycle.")]),e._v(" "),s("h4",{attrs:{id:"limitations-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#limitations-3"}},[e._v("#")]),e._v(" Limitations")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/runs/7606931983?check_suite_focus=true",target:"_blank",rel:"noopener noreferrer"}},[e._v("A success"),s("OutboundLink")],1),e._v(" may take a long time to run, 7-10 minutes per simulation in CI.")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/runs/7606932295?check_suite_focus=true",target:"_blank",rel:"noopener noreferrer"}},[e._v("Timeouts"),s("OutboundLink")],1),e._v(" sometimes occur on apparent successes without any indication why.")]),e._v(" "),s("li",[e._v("Useful error messages not provided on "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/runs/7606932548?check_suite_focus=true",target:"_blank",rel:"noopener noreferrer"}},[e._v("failure"),s("OutboundLink")],1),e._v(" from CI, requiring a developer to run\nthe simulation locally to reproduce.")])]),e._v(" "),s("h3",{attrs:{id:"e2e-tests"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#e2e-tests"}},[e._v("#")]),e._v(" E2E tests")]),e._v(" "),s("p",[e._v("End to end tests exercise the entire system as we understand it in as close an approximation\nto a production environment as is practical.  Presently these tests are located at\n"),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/tree/main/tests/e2e",target:"_blank",rel:"noopener noreferrer"}},[e._v("tests/e2e"),s("OutboundLink")],1),e._v(" and rely on "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/tree/main/testutil/network",target:"_blank",rel:"noopener noreferrer"}},[e._v("testutil/network"),s("OutboundLink")],1),e._v(" to start up an in-process Tendermint node.")]),e._v(" "),s("h4",{attrs:{id:"limitations-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#limitations-4"}},[e._v("#")]),e._v(" Limitations")]),e._v(" "),s("p",[e._v("In general the limitations of end to end tests are orchestration and compute cost.\nScaffolding is required to start up and run a prod-like environment and the this\nprocess takes much longer to start and run than unit or integration tests.")]),e._v(" "),s("p",[e._v("Global locks present in Tendermint code cause stateful starting/stopping to sometimes hang\nor fail intermittently when run in a CI environment.")]),e._v(" "),s("p",[e._v("The scope of e2e tests has been complected with command line interface testing.")]),e._v(" "),s("h2",{attrs:{id:"decision"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#decision"}},[e._v("#")]),e._v(" Decision")]),e._v(" "),s("p",[e._v("We accept these test scopes and identify the following decisions points for each.")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Scope")]),e._v(" "),s("th",[e._v("App Fixture")]),e._v(" "),s("th",[e._v("Mocks?")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("Unit")]),e._v(" "),s("td",[e._v("None")]),e._v(" "),s("td",[e._v("Yes")])]),e._v(" "),s("tr",[s("td",[e._v("Integration")]),e._v(" "),s("td",[e._v("depinject")]),e._v(" "),s("td",[e._v("Some")])]),e._v(" "),s("tr",[s("td",[e._v("Simulation")]),e._v(" "),s("td",[e._v("simapp")]),e._v(" "),s("td",[e._v("No")])]),e._v(" "),s("tr",[s("td",[e._v("E2E")]),e._v(" "),s("td",[e._v("simapp")]),e._v(" "),s("td",[e._v("No")])])])]),e._v(" "),s("h4",{attrs:{id:"unit-tests-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unit-tests-2"}},[e._v("#")]),e._v(" Unit Tests")]),e._v(" "),s("p",[e._v("All modules must have mocked unit test coverage.")]),e._v(" "),s("p",[e._v("Illustrative tests should outnumber journeys in unit tests.")]),e._v(" "),s("p",[e._v("~BDD feature tests are recommended when building up illustrative and journey scenarios.~")]),e._v(" "),s("p",[e._v("Unit tests should outnumber integration tests.")]),e._v(" "),s("p",[e._v("Unit tests must not introduce additional dependencies beyond those already present in\nproduction code.")]),e._v(" "),s("p",[e._v("When module unit test introduction as per "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/issues/12398",target:"_blank",rel:"noopener noreferrer"}},[e._v("EPIC: Unit testing of modules via mocks"),s("OutboundLink")],1),e._v("\nresults in a near complete rewrite of an integration test suite the test suite should be\nretained and moved to "),s("code",[e._v("/tests/integration")]),e._v(".  We accept the resulting test logic\nduplication but recommend improving the unit test suite through the addition of\nillustrative tests.")]),e._v(" "),s("h4",{attrs:{id:"integration-tests-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#integration-tests-2"}},[e._v("#")]),e._v(" Integration Tests")]),e._v(" "),s("p",[e._v("All integration tests shall be located in "),s("code",[e._v("/tests/integration")]),e._v(", even those which do not\nintroduce extra module dependencies.")]),e._v(" "),s("p",[e._v("To help limit scope and complexity, it is recommended to use the smallest possible number of\nmodules in application startup, i.e. don't depend on simapp.")]),e._v(" "),s("p",[e._v("Integration tests should outnumber e2e tests.")]),e._v(" "),s("h4",{attrs:{id:"simulations-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#simulations-2"}},[e._v("#")]),e._v(" Simulations")]),e._v(" "),s("p",[e._v("Simulations shall startup and test simapp directly.")]),e._v(" "),s("h4",{attrs:{id:"e2e-tests-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#e2e-tests-2"}},[e._v("#")]),e._v(" E2E Tests")]),e._v(" "),s("p",[e._v("Existing e2e tests shall be migrated to integration tests by removing the dependency on the\ntest network and in-process Tendermint node to ensure we do not lose test coverage.")]),e._v(" "),s("p",[e._v("The e2e rest runner shall transition from in process Tendermint to a runner powered by\nDocker via "),s("a",{attrs:{href:"https://github.com/ory/dockertest",target:"_blank",rel:"noopener noreferrer"}},[e._v("dockertest"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("p",[e._v("E2E tests exercising a full network upgrade shall be written.")]),e._v(" "),s("p",[e._v("The CLI testing aspect of existing e2e tests shall be rewritten using the network mocking\ndemonstrated in "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/pull/12706",target:"_blank",rel:"noopener noreferrer"}},[e._v("PR#12706"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("h2",{attrs:{id:"consequences"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#consequences"}},[e._v("#")]),e._v(" Consequences")]),e._v(" "),s("h3",{attrs:{id:"positive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#positive"}},[e._v("#")]),e._v(" Positive")]),e._v(" "),s("ul",[s("li",[e._v("test coverage is increased")]),e._v(" "),s("li",[e._v("test organization is improved")]),e._v(" "),s("li",[e._v("reduced dependency graph size in modules")]),e._v(" "),s("li",[e._v("simapp removed as a dependency from modules")]),e._v(" "),s("li",[e._v("inter-module dependencies introduced in test code are removed")]),e._v(" "),s("li",[e._v("reduced CI run time after transitioning away from in process Tendermint")])]),e._v(" "),s("h3",{attrs:{id:"negative"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#negative"}},[e._v("#")]),e._v(" Negative")]),e._v(" "),s("ul",[s("li",[e._v("some test logic duplication between unit and integration tests during transition")]),e._v(" "),s("li",[e._v("test written using dockertest DX may be a bit worse")])]),e._v(" "),s("h3",{attrs:{id:"neutral"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#neutral"}},[e._v("#")]),e._v(" Neutral")]),e._v(" "),s("ul",[s("li",[e._v("learning curve for BDD style tests")]),e._v(" "),s("li",[e._v("some discovery required for e2e transition to dockertest")])]),e._v(" "),s("h2",{attrs:{id:"further-discussions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#further-discussions"}},[e._v("#")]),e._v(" Further Discussions")]),e._v(" "),s("p",[e._v("It may be useful if test suites could be run in integration mode (with mocked tendermint) or\nwith e2e fixtures (with real tendermint and many nodes). Integration fixtures could be used\nfor quicker runs, e2e fixures could be used for more battle hardening.")]),e._v(" "),s("p",[e._v("A PoC "),s("code",[e._v("x/gov")]),e._v(" was completed in PR "),s("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/pull/12847",target:"_blank",rel:"noopener noreferrer"}},[e._v("#12847"),s("OutboundLink")],1),e._v("\nis in progress for unit tests demonstrating BDD.\nObserving that a strength of BDD specifications is their readability, and a con is the\ncognitive load while writing and maintaining, current consensus is to reserve BDD use\nfor places in the SDK where complex rules and module interactions are demonstrated.\nMore straightforward or low level test cases will continue to rely on go table tests.")]),e._v(" "),s("p",[e._v("Levels are network mocking in integration and e2e tests are still being worked on and formalized.")])])}),[],!1,null,null,null);t.default=o.exports}}]);